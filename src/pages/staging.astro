---
import BaseLayout from "../layouts/BaseLayout.astro";
const REPO_URL = "https://github.com/KevinHegg/tweetsie-app";
const SITE_URL = "https://tweetsie.app";
---
<BaseLayout title="[Collections as Data] for Apps" desc="Staging">
  <style>
    /* Mobile Safari fixes */
    @media (max-width: 768px) {
      .mobile-safe {
        overflow-x: hidden;
        word-wrap: break-word;
        hyphens: auto;
      }
      
      .mobile-grid {
        grid-template-columns: 1fr !important;
        gap: 1rem !important;
      }
      
      .mobile-text {
        font-size: 0.875rem !important;
        line-height: 1.4 !important;
      }
      
      .mobile-padding {
        padding: 1rem !important;
      }
    }
  </style>
  <section class="mb-6 mobile-safe">
    <h1 class="text-3xl font-semibold">[<a href="https://collectionsasdata.github.io/" class="text-blue-600 hover:text-blue-800 underline" target="_blank" rel="noopener noreferrer">Collections as Data</a>] for Apps — Tweetsie (Live Cursor Build)</h1>
    <p class="mt-2 text-sm text-neutral-700">
      Welcome to our <strong>collaborative vibe coding session</strong>—an experiment in turning collections as data into bespoke webapps. This is a new way of sharing collections big and small, made possible by the rise of <strong>vibe coding platforms</strong> like <a href="https://cursor.sh" class="text-blue-600 hover:text-blue-800 underline" target="_blank" rel="noopener noreferrer">Cursor</a>, <a href="https://loveable.dev" class="text-blue-600 hover:text-blue-800 underline" target="_blank" rel="noopener noreferrer">Loveable</a>, <a href="https://github.com/features/copilot" class="text-blue-600 hover:text-blue-800 underline" target="_blank" rel="noopener noreferrer">GitHub Copilot</a>, and <a href="https://replit.com" class="text-blue-600 hover:text-blue-800 underline" target="_blank" rel="noopener noreferrer">Replit</a>. We're building on the strong foundation of the collections as data movement to create a new paradigm: <em>collaborative, accessible, and engaging ways to bring cultural heritage to life through modern web development</em>. Join us in this exciting frontier where archivists, developers, and AI assistants work together to build beautiful, functional collections interfaces.
    </p>
    <p class="mt-3 text-sm text-neutral-700">
      We're starting from a playful HELLO&nbsp;WORLD and, in ~60 minutes, will see how far a small group can build:
      site structure, a minimal items list &amp; details page, maybe an image wall or a simple timeline—audience-led.
    </p>
  </section>

  <section class="grid md:grid-cols-2 gap-4 mobile-grid mobile-safe">
    <div class="bg-white border rounded-xl p-4">
      <h2 class="font-semibold mb-2">Run of Show (60 min + optional 30)</h2>
      <ol class="list-decimal ml-5 space-y-1 text-sm">
        <li><strong>10' Orientation:</strong> Review this Staging doc—goals, constraints, and how we got here (easy, cheap, reproducible).
          <ul class="list-disc ml-5 mt-1 space-y-1 text-[0.9em] text-neutral-700">
            <li>Domain: <code>tweetsie.app</code> (Porkbun).</li>
            <li>Repo: GitHub → small Astro + Tailwind scaffold (client-only).</li>
            <li>Hosting: Netlify builds from GitHub and serves the static site over CDN.</li>
            <li>Data & images pre-staged locally (<code>/data</code>, <code>/public/images</code>).</li>
            <li>Costs: low now, predictable later (see Technology & Costs card).</li>
          </ul>
        </li>
        <li><strong>15' Data wiring:</strong> Fetch <code>/data/items.json</code> and render a minimal list (title + thumbnail).</li>
        <li><strong>25' Core features (audience chooses):</strong> navigation & site structure; an Items control panel with Subject, Start Year, End Year, Sort (Title A–Z/Z–A, Year ↑/↓), and keyword search; item details page.</li>
        <li><strong>10' Visual polish:</strong> apply the mid-century "Tweetsie" theme; optionally add an image wall or simple timeline by <code>year_start/year_end</code>.</li>
        <li><strong>5' Ship:</strong> commit → build on Netlify → verify at <a class="underline" href="https://tweetsie.app">https://tweetsie.app</a>.</li>
      </ol>
      <p class="text-xs text-neutral-500 mt-3">Optional +30': open build for extras (lightbox zoom/pan, CSV export later, URL state, etc.).</p>
    </div>

    <div class="bg-white border rounded-xl p-4">
      <h2 class="font-semibold mb-2">What's pre-staged</h2>
      <ul class="list-disc ml-5 space-y-1 text-sm">
        <li>Images in <code>/public/images/</code>; metadata JSON in <code>/data/</code> (copied to <code>/public/data/items.json</code> on build).</li>
        <li>Domain: <a class="underline" href={SITE_URL}>{SITE_URL}</a> · Stack: Astro + Tailwind (static, client-side only).</li>
        <li>Homepage: live HELLO WORLD train animation.</li>
        <li>Repo: <a class="underline" href={REPO_URL}>{REPO_URL}</a></li>
      </ul>
    </div>

    <div class="bg-white border rounded-xl p-4">
      <h2 class="font-semibold mb-2">Technology & Costs (static-first, client-only stack)</h2>
      <p class="text-sm text-neutral-700 mb-3">
        We're using a <strong>static-first, client-only stack</strong>: Astro + Tailwind on the frontend, no backend, no database, built from GitHub and deployed on Netlify.
      </p>

      <ul class="list-disc ml-5 space-y-1 text-sm">
        <li><strong>Domain (Porkbun)</strong>: <code>tweetsie.app</code> — <em>$5.99 first year</em>, then <em>$14.99/year</em>.</li>
        <li><strong>Source (GitHub)</strong>: <a class="underline" href="https://github.com/KevinHegg/tweetsie-app">tweetsie-app repo</a> — <em>free</em>.</li>
        <li><strong>Hosting (Netlify)</strong>: static site build &amp; CDN — <em>free tier (sufficient for this project)</em>.</li>
        <li><strong>Assistant (Cursor)</strong>: AI pair-programmer — <em>$20/month</em>.</li>
        <li><strong>ChatGPT+ (optional)</strong>: For building Cursor prompts and learning the tech stack — <em>$20/month</em>.</li>
      </ul>

      <div class="mt-3 text-sm text-neutral-700">
        <h3 class="font-medium mb-1">How GitHub &amp; Netlify work together</h3>
        <ol class="list-decimal ml-5 space-y-1">
          <li>We push changes to the GitHub repo (<code>main</code> branch).</li>
          <li>Netlify sees the push, runs our build (<code>npm run build</code>), and publishes <code>dist/</code>.</li>
          <li>Netlify serves the site globally over its CDN and auto-provisions HTTPS for <code>tweetsie.app</code>.</li>
          <li>Every commit creates a new deploy; rollbacks are one click.</li>
        </ol>
      </div>
    </div>

    <div class="bg-white border rounded-xl p-4">
      <h2 class="font-semibold mb-2">Considerations for Larger Collections</h2>
      <p class="text-sm text-neutral-700 mb-2">
        For collections with thousands of items, you often need a fuller stack with a discovery layer and admin tools—which changes the vibe-coding constraints.
      </p>

      <div class="grid md:grid-cols-2 gap-3 text-sm">
        <div>
          <h3 class="font-medium mb-1">Complications</h3>
          <ul class="list-disc ml-5 space-y-1">
            <li>Search & discovery: facets, relevance, typo tolerance, pagination.</li>
            <li>Write paths: editing, bulk ingest, authority control, audit trails.</li>
            <li>Access: roles/permissions, embargoes, sensitive items, preservation copies.</li>
            <li>Images: derivatives, IIIF manifests/tiling, storage and egress costs.</li>
            <li>Performance: API limits, caching strategy, index refresh, batch jobs.</li>
            <li>Governance: metadata quality, rights at scale, PII, backups/restore.</li>
          </ul>
        </div>

        <div>
          <h3 class="font-medium mb-1">Practical paths</h3>
          <ul class="list-disc ml-5 space-y-1">
            <li>Search: Algolia or OpenSearch with incremental indexing and clear facets.</li>
            <li>Assets: IIIF server (e.g., Cantaloupe) + object storage (S3/R2) for tiles/derivatives.</li>
            <li>CMS/Admin: Sanity/Strapi/Directus—or a lightweight Rails/Django admin.</li>
            <li>Auth: Netlify Identity or GitHub OIDC with role-based access control.</li>
            <li>Architecture: keep public pages static; call APIs for search/details only.</li>
            <li>Ops: background workers for ingest/derivatives; staging → prod promotion.</li>
          </ul>
        </div>
      </div>

      <p class="text-xs text-neutral-500 mt-3">
        Today we stay static-first and client-only; this card is a roadmap if the prototype grows.
      </p>
    </div>

    <div class="bg-white border rounded-xl p-4">
      <h2 class="font-semibold mb-2">Feature ideas (pick together)</h2>
      <ul class="list-disc ml-5 space-y-1 text-sm">
        <li><strong>Navigation &amp; site structure</strong>: Home · Items · Item details.</li>
        <li><strong>List + details page</strong>: link <code>/items → /item/[id]</code>, render image + core metadata.</li>
        <li><strong>Filters</strong>: subject chips/select, year min/max, text search (title/description).</li>
        <li><strong>Image wall</strong>: grid respecting <code>orientation</code>/<code>aspect_ratio</code>.</li>
        <li><strong>Timeline</strong>: simple year band by <code>year_start/year_end</code>.</li>
      </ul>
    </div>

    <div class="bg-white border rounded-xl p-4">
      <h2 class="font-semibold mb-2">Guardrails &amp; success</h2>
      <ul class="list-disc ml-5 space-y-1 text-sm">
        <li>Replace the train animation landing page with an appropriate welcome message or introduction to the site.</li>
        <li><strong>Success</strong>: navigable items list, at least one working filter, a functional details page, something fun like a map, timeline, or wall of images, and a well-designed and engaging site look and feel.</li>
      </ul>
    </div>
  </section>

  <section class="bg-white border rounded-xl p-4 mt-4 mobile-safe mobile-padding">
    <h2 class="font-semibold mb-2">Starter prompts (build order)</h2>
    <ol class="list-decimal ml-5 space-y-2 text-sm">
      <li>Create an "Items" page that lists our collection (title + thumbnail) with each item linking to its own page.</li>
      <li>When I click a title, show a details page with the large image, title, date, short description, rights note, and a link back to the list.</li>
      <li>Add simple site navigation with links for Home, Items, and Welcome/Notes, keeping the design clean and readable.</li>
      <li>Add a <strong>control panel</strong> at the top of the Items page with <strong>three filters</strong> (Subject, Start Year, End Year), a <strong>Sort</strong> selector (Title A–Z/Z–A and Year ↑/↓), and a <strong>keyword search</strong> that matches words found anywhere in <code>items.json</code> (title, description, subjects, etc.).</li>
      <li>Add a toggle on the Items page to switch between a simple list and a wall of images that looks good with tall and wide photos.</li>
      <li>Add an accessible fullscreen lightbox for item images with zoom &amp; pan (no previous/next), closing on ESC or backdrop click.</li>
      <li>Add a lightweight timeline control that lets me filter by year ranges using <code>year_start</code>/<code>year_end</code>.</li>
      <li>Give the site a cohesive mid-century "Tweetsie" look (palette from our images, ticket-stub subject chips, subtle paper grain, "railroad track" dividers), mobile-first.</li>
      <li>Create a Welcome page that briefly introduces the Tweetsie Collection using and citing the JMU finding aid and the Artstor landing page (clear links, no verbatim copying).</li>
    </ol>
  </section>

  <!-- One-shot Mega-Prompt (hidden until reveal) -->
  <section class="bg-white border rounded-xl p-4 mt-4">
    <details>
      <summary class="cursor-pointer select-none text-sm text-neutral-700">
        <span class="underline">One-shot Mega-Prompt (reveal)</span>
      </summary>
      <div class="mt-3">
        <textarea readonly class="w-full h-72 text-xs p-3 border rounded-lg bg-neutral-50">
Be creative: build a mobile-first, dynamic, highly interactive prototype for the Tweetsie collection using our static, client-only stack (Astro + Tailwind), our pre-staged data (fetch /data/items.json) and images (/public/images), and no servers or external APIs; keep the HELLO WORLD homepage animation intact.

1) Create an "Items" page that lists the collection as titles with small thumbnails, each linking to its own detail page.  
2) Build the details page to show the large image, title, date, short description, rights note, subjects as chips, and a back link to the list.  
3) Add basic site navigation (Home, Items, Welcome/Notes) and keep the design clean and readable.  
4) Add a CONTROL PANEL at the top of the Items page with: (a) Subject filter, (b) Start Year, (c) End Year; add a Sort selector (Title A–Z/Z–A and Year ascending/descending); add a keyword Search that matches words anywhere in items.json (title, description, subjects, etc.); all filtering/sorting/searching is client-side, fast, and debounced.  
5) Add a toggle to switch the Items page between a simple list and an image wall that respects orientation/aspect_ratio and looks great on phones.  
6) Add an accessible fullscreen LIGHTBOX for item images with zoom & pan (wheel/pinch to zoom, drag to pan, ESC/backdrop to close), no previous/next; implement with plain JS or a tiny helper (no UI frameworks), keeping bundle size small.  
7) Add a simple TIMELINE control to filter by year ranges using year_start/year_end when present, falling back to parsing the year from the human date field.  
8) Apply a cohesive mid-century "Tweetsie" THEME across the site: derive a small palette from one of our images (cream paper, brick-red, diesel-green, coal-black, sky-blue), use a slab-serif for headings and a humanist sans for text (system fonts only), add subtle paper grain, style subject chips like ticket stubs, and use "railroad track" dividers between sections.  
9) Create a WELCOME page that briefly introduces the Tweetsie Collection using and citing the JMU finding aid (https://www.lib.jmu.edu/charles-grattan-price-jr-collection-on-tweetsie-and-the-shenandoah-central-railroad-is-now-open-for-research/) and the Artstor landing page (https://www.jstor.org/site/jamesmadisonuniversity/jamesmadisonuniversitycharlesgrattanpricejrcollectionontweetsieandtheshenandoahcentralrailroad/?so=item_title_str_asc); write in your own words, add clear links, and keep it concise.  

Guardrails: client-only (no servers/DB), only fetch /data/items.json; be accessible (semantic headings, alt text, keyboard support); keep code small and readable; no heavy dependencies; do not remove or break the homepage animation.  
Output: updated pages/components with Tailwind classes, tiny helper utilities if needed, and a short summary of changes after each step.
        </textarea>
        <p class="mt-2 text-xs text-neutral-500">Tip: click inside, Ctrl/Cmd-A to copy.</p>
      </div>
    </details>
  </section>
</BaseLayout>
