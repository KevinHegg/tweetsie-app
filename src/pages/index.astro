---
import BaseLayout from "../layouts/BaseLayout.astro";
---
<BaseLayout title="TWEETSIE TRAIN â€¢ Tweetsie" desc="1950s Style Train Animation">
  <div class="mb-6">
    <h1 class="text-3xl font-bold text-blue-800">ðŸš‚ TWEETSIE TRAIN</h1>
  </div>

  <div class="border-4 border-blue-600 rounded-xl overflow-hidden bg-gradient-to-b from-blue-50 to-blue-100 shadow-lg">
    <canvas id="trainCanvas" style="display:block; width:100%; height:70vh"></canvas>
  </div>

  <div class="mt-4 flex items-center gap-3">
    <a href="/staging" class="rounded-lg border-2 border-blue-600 px-4 py-2 text-sm bg-blue-50 hover:bg-blue-100 text-blue-800 font-semibold transition-colors no-underline">
      ðŸš‚ Start New Journey
    </a>
    <span id="status" class="text-sm text-blue-700 font-medium"></span>
  </div>

  <script>
    (() => {
      const PHRASE1 = "TWEETSIESAYS";
      const PHRASE2 = "HELLOWORLD";
      const LETTERS1 = PHRASE1.split("").reverse(); // Reverse order for pickup
      const LETTERS2 = PHRASE2.split("").reverse(); // Reverse order for pickup
      
      const canvas = document.getElementById("trainCanvas") as HTMLCanvasElement;
      const ctx = canvas.getContext("2d")!;
      const statusEl = document.getElementById("status")!;

      // Canvas setup
      function fit() {
        const rect = canvas.getBoundingClientRect();
        canvas.width = Math.max(800, Math.floor(rect.width));
        canvas.height = Math.max(500, Math.floor(rect.height));
      }

      // Train states
      let train1: {
        x: number;
        y: number;
        direction: number;
        speed: number;
        cars: TrainCar[];
        collected: number;
        state: 'collecting' | 'complete' | 'smoking';
        smokeParticles: SmokeParticle[];
      } = {
        x: 50,
        y: canvas.height / 2 - 80, // Upper track
        direction: 1,
        speed: 3,
        cars: [],
        collected: 0,
        state: 'collecting',
        smokeParticles: []
      };

      let train2: {
        x: number;
        y: number;
        direction: number;
        speed: number;
        cars: TrainCar[];
        collected: number;
        state: 'collecting' | 'complete' | 'smoking';
        smokeParticles: SmokeParticle[];
      } = {
        x: 50,
        y: canvas.height / 2 + 80, // Lower track
        direction: 1,
        speed: 2.8, // Slightly different speed for variety
        cars: [],
        collected: 0,
        state: 'collecting',
        smokeParticles: []
      };

      // Letter cars positioned along the tracks
      let letterCars1: Array<{
        letter: string;
        x: number;
        y: number;
        collected: boolean;
        carWidth: number;
        carHeight: number;
      }> = [];

      let letterCars2: Array<{
        letter: string;
        x: number;
        y: number;
        collected: boolean;
        carWidth: number;
        carHeight: number;
      }> = [];

      function placeLetterCars() {
        letterCars1 = [];
        letterCars2 = [];
        
        const track1Y = canvas.height / 2 - 80; // Upper track
        const track2Y = canvas.height / 2 + 80; // Lower track
        
        // Calculate responsive spacing based on canvas width
        const totalWidth = canvas.width;
        const margin = 100; // Left and right margins
        const availableWidth = totalWidth - (margin * 2);
        
        // Calculate spacing to fit all letters
        const spacing1 = Math.min(70, availableWidth / LETTERS1.length);
        const spacing2 = Math.min(70, availableWidth / LETTERS2.length);
        
        // Center the letter collections
        const startX1 = margin + (availableWidth - (LETTERS1.length - 1) * spacing1) / 2;
        const startX2 = margin + (availableWidth - (LETTERS2.length - 1) * spacing2) / 2;
        
        // Place letters for TWEETSIESAYS on upper track
        for (let i = 0; i < LETTERS1.length; i++) {
          letterCars1.push({
            letter: LETTERS1[i],
            x: startX1 + i * spacing1,
            y: track1Y,
            collected: false,
            carWidth: 60,
            carHeight: 40
          });
        }
        
        // Place letters for HELLOWORLD on lower track
        for (let i = 0; i < LETTERS2.length; i++) {
          letterCars2.push({
            letter: LETTERS2[i],
            x: startX2 + i * spacing2,
            y: track2Y,
            collected: false,
            carWidth: 60,
            carHeight: 40
          });
        }
      }

      // Train car class
      class TrainCar {
        letter: string;
        x: number;
        y: number;
        targetX: number;
        targetY: number;
        connected: boolean;

        constructor(letter: string, x: number, y: number) {
          this.letter = letter;
          this.x = x;
          this.y = y;
          this.targetX = x;
          this.targetY = y;
          this.connected = false;
        }

        update() {
          // Smooth movement to target position
          this.x += (this.targetX - this.x) * 0.1;
          this.y += (this.targetY - this.y) * 0.1;
        }

        draw() {
          ctx.save();
          
          // Car body
          ctx.fillStyle = '#DC2626'; // Red car
          ctx.fillRect(this.x - 30, this.y - 20, 60, 40);
          
          // Car outline
          ctx.strokeStyle = '#991B1B';
          ctx.lineWidth = 2;
          ctx.strokeRect(this.x - 30, this.y - 20, 60, 40);
          
          // Windows
          ctx.fillStyle = '#1E40AF';
          ctx.fillRect(this.x - 20, this.y - 15, 15, 12);
          ctx.fillRect(this.x + 5, this.y - 15, 15, 12);
          
          // Letter
          ctx.fillStyle = '#FFFFFF';
          ctx.font = 'bold 24px Arial';
          ctx.textAlign = 'center';
          ctx.textBaseline = 'middle';
          ctx.fillText(this.letter, this.x, this.y + 2);
          
          // Coupling
          if (this.connected) {
            ctx.strokeStyle = '#374151';
            ctx.lineWidth = 3;
            ctx.beginPath();
            ctx.moveTo(this.x - 30, this.y);
            ctx.lineTo(this.x - 35, this.y);
            ctx.stroke();
          }
          
          ctx.restore();
        }
      }

      // Smoke particle class
      class SmokeParticle {
        x: number;
        y: number;
        vx: number;
        vy: number;
        life: number;
        decay: number;
        size: number;

        constructor(x: number, y: number) {
          this.x = x;
          this.y = y;
          this.vx = (Math.random() - 0.5) * 2;
          this.vy = -Math.random() * 1 - 0.5;
          this.life = 1;
          this.decay = 0.015; // Slower decay for longer-lasting smoke
          this.size = Math.random() * 12 + 6; // Larger smoke particles
        }

        update() {
          this.x += this.vx;
          this.y += this.vy;
          this.life -= this.decay;
          this.size *= 0.98;
        }

        draw() {
          if (this.life <= 0) return;
          
          ctx.save();
          ctx.globalAlpha = this.life;
          ctx.fillStyle = '#6B7280';
          ctx.beginPath();
          ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
          ctx.fill();
          ctx.restore();
        }
      }

      function init() {
        fit();
        placeLetterCars();
        train1 = {
          x: 50,
          y: canvas.height / 2 - 80,
          direction: 1,
          speed: 3,
          cars: [],
          collected: 0,
          state: 'collecting',
          smokeParticles: []
        };
        train2 = {
          x: 50,
          y: canvas.height / 2 + 80,
          direction: 1,
          speed: 2.8,
          cars: [],
          collected: 0,
          state: 'collecting',
          smokeParticles: []
        };
        statusEl.textContent = `ðŸš‚ Train 1: ${PHRASE1} | Train 2: ${PHRASE2}`;
      }

      function updateTrain(train: any, letterCars: any[], letters: string[], phrase: string) {
        if (train.state === 'complete') return;
        
        // Move train
        train.x += train.speed * train.direction;
        
        // Check boundaries and change direction
        if (train.x > canvas.width - 100) {
          train.direction = -1;
        } else if (train.x < 50) {
          train.direction = 1;
        }
        
        // Check for letter collection
        letterCars.forEach((car: any, index: number) => {
          if (!car.collected && train.x > car.x - 70 && train.x < car.x + 70) {
            car.collected = true;
            train.collected++;
            
            // Add car to train
            const newCar = new TrainCar(car.letter, train.x, train.y);
            train.cars.push(newCar);
            
            // Update status when both trains complete
            if (train.collected >= letters.length) {
              train.state = 'complete';
              
              // Check if both trains are complete
              if (train1.state === 'complete' && train2.state === 'complete') {
                statusEl.textContent = 'ðŸŽ‰ Complete! TWEETSIESAYS HELLOWORLD';
                
                // Start smoking after a delay
                setTimeout(() => {
                  train1.state = 'smoking';
                  train2.state = 'smoking';
                  statusEl.textContent = 'ðŸ’¨ Both trains celebrate with smoke!';
                }, 1000);
              } else {
                statusEl.textContent = `ðŸš‚ ${phrase} complete! Waiting for other train...`;
              }
            }
          }
        });
        
        // Update train cars positions
        let lastX = train.x;
        let lastY = train.y;
        
        train.cars.forEach((car: TrainCar) => {
          car.targetX = lastX - 70;
          car.targetY = lastY;
          car.connected = true;
          car.update();
          lastX = car.x;
          lastY = car.y;
        });
      }

      function updateTrains() {
        updateTrain(train1, letterCars1, LETTERS1, PHRASE1);
        updateTrain(train2, letterCars2, LETTERS2, PHRASE2);
      }

      function updateSmoke() {
        // Handle smoke for train1
        if (train1.state === 'smoking') {
          if (Math.random() < 0.6) {
            train1.smokeParticles.push(new SmokeParticle(
              train1.x + (train1.direction > 0 ? 40 : -40),
              train1.y - 30
            ));
          }
        }
        
        // Handle smoke for train2
        if (train2.state === 'smoking') {
          if (Math.random() < 0.6) {
            train2.smokeParticles.push(new SmokeParticle(
              train2.x + (train2.direction > 0 ? 40 : -40),
              train2.y - 30
            ));
          }
        }
        
        // Update existing particles for both trains
        train1.smokeParticles = train1.smokeParticles.filter(particle => {
          particle.update();
          return particle.life > 0;
        });
        
        train2.smokeParticles = train2.smokeParticles.filter(particle => {
          particle.update();
          return particle.life > 0;
        });
      }

      function drawBackground() {
        // Sky gradient
        const gradient = ctx.createLinearGradient(0, 0, 0, canvas.height);
        gradient.addColorStop(0, '#87CEEB');
        gradient.addColorStop(1, '#E0F6FF');
        ctx.fillStyle = gradient;
        ctx.fillRect(0, 0, canvas.width, canvas.height);
        
        // Ground
        ctx.fillStyle = '#8FBC8F';
        ctx.fillRect(0, canvas.height - 100, canvas.width, 100);
        
        // Upper Track
        ctx.fillStyle = '#696969';
        ctx.fillRect(0, canvas.height / 2 - 80 - 5, canvas.width, 10);
        
        // Lower Track
        ctx.fillStyle = '#696969';
        ctx.fillRect(0, canvas.height / 2 + 80 - 5, canvas.width, 10);
        
        // Track ties for upper track
        ctx.fillStyle = '#8B4513';
        for (let x = 0; x < canvas.width; x += 40) {
          ctx.fillRect(x, canvas.height / 2 - 80 - 15, 30, 30);
        }
        
        // Track ties for lower track
        for (let x = 0; x < canvas.width; x += 40) {
          ctx.fillRect(x, canvas.height / 2 + 80 - 15, 30, 30);
        }
      }

      function drawLetterCars() {
        // Draw letter cars for upper track
        letterCars1.forEach(car => {
          if (!car.collected) {
            ctx.save();
            
            // Car body
            ctx.fillStyle = '#FFD700';
            ctx.fillRect(car.x - car.carWidth/2, car.y - car.carHeight/2, car.carWidth, car.carHeight);
            
            // Car outline
            ctx.strokeStyle = '#B8860B';
            ctx.lineWidth = 2;
            ctx.strokeRect(car.x - car.carWidth/2, car.y - car.carHeight/2, car.carWidth, car.carHeight);
            
            // Windows
            ctx.fillStyle = '#1E40AF';
            ctx.fillRect(car.x - 20, car.y - 12, 12, 10);
            ctx.fillRect(car.x + 8, car.y - 12, 12, 10);
            
            // Letter
            ctx.fillStyle = '#000000';
            ctx.font = 'bold 20px Arial';
            ctx.textAlign = 'center';
            ctx.textBaseline = 'middle';
            ctx.fillText(car.letter, car.x, car.y + 1);
            
            ctx.restore();
          }
        });

        // Draw letter cars for lower track
        letterCars2.forEach(car => {
          if (!car.collected) {
            ctx.save();
            
            // Car body
            ctx.fillStyle = '#FFD700';
            ctx.fillRect(car.x - car.carWidth/2, car.y - car.carHeight/2, car.carWidth, car.carHeight);
            
            // Car outline
            ctx.strokeStyle = '#B8860B';
            ctx.lineWidth = 2;
            ctx.strokeRect(car.x - car.carWidth/2, car.y - car.carHeight/2, car.carWidth, car.carHeight);
            
            // Windows
            ctx.fillStyle = '#1E40AF';
            ctx.fillRect(car.x - 20, car.y - 12, 12, 10);
            ctx.fillRect(car.x + 8, car.y - 12, 12, 10);
            
            // Letter
            ctx.fillStyle = '#000000';
            ctx.font = 'bold 20px Arial';
            ctx.textAlign = 'center';
            ctx.textBaseline = 'middle';
            ctx.fillText(car.letter, car.x, car.y + 1);
            
            ctx.restore();
          }
        });
      }

      function drawTrain(train: any) {
        ctx.save();
        
        // Main locomotive
        const locoX = train.x;
        const locoY = train.y;
        
        // Loco body
        ctx.fillStyle = '#1F2937';
        ctx.fillRect(locoX - 50, locoY - 30, 100, 60);
        
        // Loco outline
        ctx.strokeStyle = '#111827';
        ctx.lineWidth = 3;
        ctx.strokeRect(locoX - 50, locoY - 30, 100, 60);
        
        // Loco details
        ctx.fillStyle = '#DC2626';
        ctx.fillRect(locoX - 45, locoY - 25, 90, 50);
        
        // Windows
        ctx.fillStyle = '#1E40AF';
        ctx.fillRect(locoX - 35, locoY - 20, 25, 20);
        ctx.fillRect(locoX + 10, locoY - 20, 25, 20);
        
        // Headlight
        ctx.fillStyle = '#FCD34D';
        ctx.beginPath();
        ctx.arc(locoX + (train.direction > 0 ? 45 : -45), locoY - 10, 8, 0, Math.PI * 2);
        ctx.fill();
        
        // Chimney
        ctx.fillStyle = '#374151';
        ctx.fillRect(locoX - 15, locoY - 45, 30, 20);
        
        // Wheels
        ctx.fillStyle = '#111827';
        ctx.beginPath();
        ctx.arc(locoX - 25, locoY + 25, 12, 0, Math.PI * 2);
        ctx.fill();
        ctx.beginPath();
        ctx.arc(locoX + 25, locoY + 25, 12, 0, Math.PI * 2);
        ctx.fill();
        
        // Draw collected cars
        train.cars.forEach((car: TrainCar) => car.draw());
        
        ctx.restore();
      }

      function drawTrains() {
        drawTrain(train1);
        drawTrain(train2);
      }

      function drawSmoke() {
        train1.smokeParticles.forEach(particle => particle.draw());
        train2.smokeParticles.forEach(particle => particle.draw());
      }

      function draw() {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        
        drawBackground();
        drawLetterCars();
        drawTrains();
        drawSmoke();
      }

      function gameLoop() {
        updateTrains();
        updateSmoke();
        draw();
        requestAnimationFrame(gameLoop);
      }

      // Set up canvas and start the animation
      fit(); 
      addEventListener("resize", () => {
        fit();
        placeLetterCars();
      });
      
      init();
      gameLoop();
    })();
  </script>
</BaseLayout>
