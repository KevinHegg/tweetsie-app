---
import BaseLayout from "../layouts/BaseLayout.astro";
---
<BaseLayout title="TWEETSIE TRAIN â€¢ Tweetsie">
  <div class="mb-6">
    <h1 class="text-3xl font-bold text-blue-800">ðŸš‚ TWEETSIE TRAIN</h1>
  </div>

  <div class="border-4 border-blue-600 rounded-xl overflow-hidden bg-gradient-to-b from-blue-50 to-blue-100 shadow-lg">
    <canvas id="trainCanvas" style="display:block; width:100%; height:70vh"></canvas>
  </div>

  <div class="mt-4 flex items-center gap-3">
    <a href="/staging" class="rounded-lg border-2 border-blue-600 px-4 py-2 text-sm bg-blue-50 hover:bg-blue-100 text-blue-800 font-semibold transition-colors no-underline">
      ðŸš‚ Start New Journey
    </a>
    <span id="status" class="text-sm text-blue-700 font-medium"></span>
  </div>

  <script>
    (() => {
      const PHRASE = "HELLO,WORLD";
      const LETTERS = PHRASE.split("").filter(letter => letter !== " "); // Remove spaces
      
      const canvas = document.getElementById("trainCanvas") as HTMLCanvasElement;
      const ctx = canvas.getContext("2d")!;
      const statusEl = document.getElementById("status")!;

      // Train state - enters from right, stops when fully visible
      let train = {
        x: 0,
        y: 0,
        speed: 1.5, // Movement speed
        state: 'entering', // 'entering', 'stopped', 'smoking'
        totalLength: 0 // Will be calculated based on train size
      };

      // Track dimensions for side view
      let trackY = 0;
      let trackHeight = 0;

      // Smoke particles
      let smokeParticles: Array<{x: number, y: number, vx: number, vy: number, life: number, maxLife: number}> = [];

      function fit() {
        const rect = canvas.getBoundingClientRect();
        canvas.width = Math.min(800, Math.max(400, Math.floor(rect.width)));
        canvas.height = Math.min(500, Math.max(300, Math.floor(rect.height)));
        
        // Calculate track position for side view
        trackY = canvas.height * 0.7; // Track is 70% down the screen
        trackHeight = 20; // Track thickness
        
        // Calculate total train length (locomotive + all cars)
        train.totalLength = 50 + (LETTERS.length * 35) + 20; // 50 for loco, 35 per car, 20 buffer
        
        // Initialize train position - start off-screen right
        train.x = canvas.width + 50;
        train.y = trackY - 30; // Train sits above the track
        train.state = 'entering';
      }

      function updateTrain() {
        if (train.state === 'entering') {
          // Train moves from right to left
          train.x -= train.speed;
          
          // Stop when the entire train is visible on the left
          if (train.x <= 80) {
            train.x = 80;
            train.state = 'stopped';
            statusEl.textContent = 'ðŸš‚ Train stopped - beginning smoke animation...';
          }
          
          // Update status
          const progress = Math.floor(((canvas.width + 50 - train.x) / (canvas.width + 50 - 80)) * 100);
          statusEl.textContent = `ðŸš‚ Train entering: ${progress}%`;
        } else if (train.state === 'stopped') {
          // Train is stopped, start smoking
          train.state = 'smoking';
          statusEl.textContent = 'ðŸš‚ Train stopped - smoking animation active!';
        }
        
        // Update smoke particles
        updateSmoke();
      }

      function updateSmoke() {
        if (train.state === 'entering') {
          // Add smoke particles while train is moving - smoke trails behind
          if (Math.random() < 0.4) { // 40% chance each frame while moving
            smokeParticles.push({
              x: train.x + 30, // Smoke stack position
              y: train.y - 45, // Above smoke stack
              vx: -Math.random() * 2 - 1, // Smoke trails behind (negative x velocity)
              vy: -Math.random() * 0.5 - 0.2, // Slight upward movement
              life: 0,
              maxLife: Math.random() * 80 + 60 // Longer lifetime for trailing effect
            });
          }
        } else if (train.state === 'smoking') {
          // Add smoke particles when stopped - smoke flows straight up
          if (Math.random() < 0.3) { // 30% chance each frame when stopped
            smokeParticles.push({
              x: train.x + 30, // Smoke stack position
              y: train.y - 45, // Above smoke stack
              vx: (Math.random() - 0.5) * 0.3, // Minimal horizontal drift
              vy: -Math.random() * 1.5 - 1, // Strong upward movement
              life: 0,
              maxLife: Math.random() * 60 + 40 // Normal lifetime
            });
          }
        }
        
        // Update existing smoke particles
        for (let i = smokeParticles.length - 1; i >= 0; i--) {
          const particle = smokeParticles[i];
          particle.x += particle.vx;
          particle.y += particle.vy;
          particle.life++;
          
          // Remove dead particles
          if (particle.life > particle.maxLife) {
            smokeParticles.splice(i, 1);
          }
        }
      }

      function drawBackground() {
        // Create a beautiful gradient background
        const gradient = ctx.createLinearGradient(0, 0, 0, canvas.height);
        gradient.addColorStop(0, '#87CEEB'); // Sky blue
        gradient.addColorStop(0.7, '#98FB98'); // Pale green
        gradient.addColorStop(1, '#F4A460'); // Sandy brown
        
        ctx.fillStyle = gradient;
        ctx.fillRect(0, 0, canvas.width, canvas.height);
        
        // Add some clouds
        ctx.fillStyle = 'rgba(255, 255, 255, 0.7)';
        ctx.beginPath();
        ctx.arc(100, 80, 30, 0, Math.PI * 2);
        ctx.arc(130, 80, 25, 0, Math.PI * 2);
        ctx.arc(160, 80, 20, 0, Math.PI * 2);
        ctx.fill();
        
        ctx.beginPath();
        ctx.arc(600, 60, 35, 0, Math.PI * 2);
        ctx.arc(630, 60, 30, 0, Math.PI * 2);
        ctx.arc(660, 60, 25, 0, Math.PI * 2);
        ctx.fill();
        
        // Add distant mountains on the horizon
        ctx.fillStyle = '#8B7355';
        ctx.beginPath();
        ctx.moveTo(0, canvas.height * 0.6);
        ctx.lineTo(200, canvas.height * 0.4);
        ctx.lineTo(400, canvas.height * 0.5);
        ctx.lineTo(600, canvas.height * 0.3);
        ctx.lineTo(800, canvas.height * 0.4);
        ctx.lineTo(canvas.width, canvas.height * 0.5);
        ctx.lineTo(canvas.width, canvas.height * 0.6);
        ctx.lineTo(0, canvas.height * 0.6);
        ctx.closePath();
        ctx.fill();
        
        // Add some trees in the background
        ctx.fillStyle = '#228B22';
        for (let i = 0; i < 6; i++) {
          const x = 100 + i * 120;
          const y = canvas.height * 0.65;
          
          // Tree trunk
          ctx.fillStyle = '#8B4513';
          ctx.fillRect(x - 4, y, 8, 25);
          
          // Tree top
          ctx.fillStyle = '#228B22';
          ctx.beginPath();
          ctx.arc(x, y - 15, 20, 0, Math.PI * 2);
          ctx.fill();
        }
      }

      function drawTrack() {
        // Side view of tracks - just the edges
        ctx.strokeStyle = '#654321';
        ctx.lineWidth = 3;
        ctx.lineCap = 'round';
        
        // Track shadow
        ctx.shadowColor = 'rgba(0, 0, 0, 0.3)';
        ctx.shadowBlur = 4;
        ctx.shadowOffsetX = 1;
        ctx.shadowOffsetY = 1;
        
        // Draw track edges as horizontal lines
        ctx.beginPath();
        ctx.moveTo(0, trackY);
        ctx.lineTo(canvas.width, trackY);
        ctx.moveTo(0, trackY + trackHeight);
        ctx.lineTo(canvas.width, trackY + trackHeight);
        ctx.stroke();
        
        // Reset shadow
        ctx.shadowColor = 'transparent';
        ctx.shadowBlur = 0;
        ctx.shadowOffsetX = 0;
        ctx.shadowOffsetY = 0;
        
        // Add track ties (cross pieces)
        ctx.fillStyle = '#8B4513';
        const tieSpacing = 40;
        for (let x = 0; x < canvas.width; x += tieSpacing) {
          ctx.fillRect(x - 2, trackY - 8, 4, 36);
        }
        
        // Add gravel/ballast around tracks
        ctx.fillStyle = '#A0522D';
        ctx.fillRect(0, trackY - 15, canvas.width, 50);
      }

      function drawSmoke() {
        // Draw smoke particles
        smokeParticles.forEach(particle => {
          const alpha = 1 - (particle.life / particle.maxLife);
          const size = 3 + (particle.life / particle.maxLife) * 4; // Particles grow as they age
          
          ctx.save();
          ctx.globalAlpha = alpha;
          ctx.fillStyle = `rgba(200, 200, 200, ${alpha})`;
          ctx.beginPath();
          ctx.arc(particle.x, particle.y, size, 0, Math.PI * 2);
          ctx.fill();
          ctx.restore();
        });
      }

      function drawTrain() {
        ctx.save();
        ctx.translate(train.x, train.y);
        
        // Smaller locomotive from side view
        ctx.shadowColor = 'rgba(0, 0, 0, 0.4)';
        ctx.shadowBlur = 4;
        ctx.shadowOffsetX = 1;
        ctx.shadowOffsetY = 1;
        
        // Main body - metallic blue
        const bodyGradient = ctx.createLinearGradient(0, -20, 40, -20);
        bodyGradient.addColorStop(0, '#4682B4');
        bodyGradient.addColorStop(0.5, '#87CEEB');
        bodyGradient.addColorStop(1, '#4682B4');
        
        ctx.fillStyle = bodyGradient;
        ctx.fillRect(0, -20, 40, 40);
        
        // Body outline
        ctx.strokeStyle = '#2F4F4F';
        ctx.lineWidth = 2;
        ctx.strokeRect(0, -20, 40, 40);
        
        // Cab section - darker blue
        const cabGradient = ctx.createLinearGradient(8, -28, 32, -28);
        cabGradient.addColorStop(0, '#2F4F4F');
        cabGradient.addColorStop(0.5, '#4682B4');
        cabGradient.addColorStop(1, '#2F4F4F');
        
        ctx.fillStyle = cabGradient;
        ctx.fillRect(8, -28, 24, 20);
        ctx.strokeRect(8, -28, 24, 20);
        
        // Windows with glass effect
        ctx.fillStyle = '#87CEEB';
        ctx.fillRect(12, -24, 16, 12);
        ctx.strokeStyle = '#2F4F4F';
        ctx.lineWidth = 1;
        ctx.strokeRect(12, -24, 16, 12);
        
        // Window frames
        ctx.strokeStyle = '#2F4F4F';
        ctx.lineWidth = 2;
        ctx.beginPath();
        ctx.moveTo(20, -24);
        ctx.lineTo(20, -12);
        ctx.stroke();
        
        // Smoke stack - metallic
        const stackGradient = ctx.createLinearGradient(18, -40, 22, -40);
        stackGradient.addColorStop(0, '#C0C0C0');
        stackGradient.addColorStop(1, '#808080');
        
        ctx.fillStyle = stackGradient;
        ctx.fillRect(18, -40, 4, 20);
        ctx.strokeRect(18, -40, 4, 20);
        
        // Smoke stack top
        ctx.fillStyle = '#A0A0A0';
        ctx.fillRect(17, -42, 6, 4);
        
        // Wheels with train wheel design - spokes and flanges
        const wheelGradient = ctx.createRadialGradient(12, 25, 0, 12, 25, 10);
        wheelGradient.addColorStop(0, '#C0C0C0');
        wheelGradient.addColorStop(0.7, '#808080');
        wheelGradient.addColorStop(1, '#404040');
        
        // Left wheel
        ctx.fillStyle = wheelGradient;
        ctx.beginPath();
        ctx.arc(12, 25, 10, 0, Math.PI * 2);
        ctx.fill();
        
        // Left wheel rim
        ctx.strokeStyle = '#2F4F4F';
        ctx.lineWidth = 2;
        ctx.beginPath();
        ctx.arc(12, 25, 7, 0, Math.PI * 2);
        ctx.stroke();
        
        // Left wheel spokes
        ctx.strokeStyle = '#2F4F4F';
        ctx.lineWidth = 1.5;
        for (let angle = 0; angle < Math.PI * 2; angle += Math.PI / 6) {
          ctx.beginPath();
          ctx.moveTo(12 + Math.cos(angle) * 2, 25 + Math.sin(angle) * 2);
          ctx.lineTo(12 + Math.cos(angle) * 6, 25 + Math.sin(angle) * 6);
          ctx.stroke();
        }
        
        // Left wheel flange (outer rim)
        ctx.strokeStyle = '#696969';
        ctx.lineWidth = 3;
        ctx.beginPath();
        ctx.arc(12, 25, 12, 0, Math.PI * 2);
        ctx.stroke();
        
        // Right wheel
        ctx.fillStyle = wheelGradient;
        ctx.beginPath();
        ctx.arc(28, 25, 10, 0, Math.PI * 2);
        ctx.fill();
        
        // Right wheel rim
        ctx.strokeStyle = '#2F4F4F';
        ctx.lineWidth = 2;
        ctx.beginPath();
        ctx.arc(28, 25, 7, 0, Math.PI * 2);
        ctx.stroke();
        
        // Right wheel spokes
        ctx.strokeStyle = '#2F4F4F';
        ctx.lineWidth = 1.5;
        for (let angle = 0; angle < Math.PI * 2; angle += Math.PI / 6) {
          ctx.beginPath();
          ctx.moveTo(28 + Math.cos(angle) * 2, 25 + Math.sin(angle) * 2);
          ctx.lineTo(28 + Math.cos(angle) * 6, 25 + Math.sin(angle) * 6);
          ctx.stroke();
        }
        
        // Right wheel flange (outer rim)
        ctx.strokeStyle = '#696969';
        ctx.lineWidth = 3;
        ctx.beginPath();
        ctx.arc(28, 25, 12, 0, Math.PI * 2);
        ctx.stroke();
        
        // Headlight with glow effect
        ctx.shadowColor = '#FFD700';
        ctx.shadowBlur = 10;
        ctx.fillStyle = '#FFD700';
        ctx.beginPath();
        ctx.arc(42, -12, 5, 0, Math.PI * 2);
        ctx.fill();
        
        // Headlight housing
        ctx.shadowColor = 'transparent';
        ctx.fillStyle = '#2F4F4F';
        ctx.fillRect(38, -16, 8, 8);
        
        // Draw all letter cars attached to the train
        let carOffset = 45; // Distance between cars
        
        for (let i = 0; i < LETTERS.length; i++) {
          // Car body with dusty rose metallic effect
          const carGradient = ctx.createLinearGradient(carOffset, -16, carOffset + 30, -16);
          carGradient.addColorStop(0, '#E8B4B8');
          carGradient.addColorStop(0.5, '#CD7B7B');
          carGradient.addColorStop(1, '#E8B4B8');
          
          ctx.fillStyle = carGradient;
          ctx.fillRect(carOffset, -16, 30, 32);
          
          // Car outline
          ctx.strokeStyle = '#8B5A5A';
          ctx.lineWidth = 2;
          ctx.strokeRect(carOffset, -16, 30, 32);
          
          // Letter in car
          ctx.fillStyle = '#FFFFFF';
          ctx.font = 'bold 14px "Courier New", monospace';
          ctx.textAlign = 'center';
          ctx.textBaseline = 'middle';
          ctx.fillText(LETTERS[i], carOffset + 15, 0);
          
          // Car wheels with train wheel design
          const carWheelGradient = ctx.createRadialGradient(carOffset + 8, 28, 0, carOffset + 8, 28, 8);
          carWheelGradient.addColorStop(0, '#C0C0C0');
          carWheelGradient.addColorStop(0.7, '#808080');
          carWheelGradient.addColorStop(1, '#404040');
          
          // Left car wheel
          ctx.fillStyle = carWheelGradient;
          ctx.beginPath();
          ctx.arc(carOffset + 8, 28, 8, 0, Math.PI * 2);
          ctx.fill();
          
          // Left car wheel rim
          ctx.strokeStyle = '#2F4F4F';
          ctx.lineWidth = 1;
          ctx.beginPath();
          ctx.arc(carOffset + 8, 28, 6, 0, Math.PI * 2);
          ctx.stroke();
          
          // Left car wheel spokes
          ctx.strokeStyle = '#2F4F4F';
          ctx.lineWidth = 1;
          for (let angle = 0; angle < Math.PI * 2; angle += Math.PI / 4) {
            ctx.beginPath();
            ctx.moveTo(carOffset + 8 + Math.cos(angle) * 1.5, 28 + Math.sin(angle) * 1.5);
            ctx.lineTo(carOffset + 8 + Math.cos(angle) * 4.5, 28 + Math.sin(angle) * 4.5);
            ctx.stroke();
          }
          
          // Left car wheel flange
          ctx.strokeStyle = '#696969';
          ctx.lineWidth = 2;
          ctx.beginPath();
          ctx.arc(carOffset + 8, 28, 10, 0, Math.PI * 2);
          ctx.stroke();
          
          // Right car wheel
          ctx.fillStyle = carWheelGradient;
          ctx.beginPath();
          ctx.arc(carOffset + 22, 28, 8, 0, Math.PI * 2);
          ctx.fill();
          
          // Right car wheel rim
          ctx.strokeStyle = '#2F4F4F';
          ctx.lineWidth = 1;
          ctx.beginPath();
          ctx.arc(carOffset + 22, 28, 6, 0, Math.PI * 2);
          ctx.stroke();
          
          // Right car wheel spokes
          ctx.strokeStyle = '#2F4F4F';
          ctx.lineWidth = 1;
          for (let angle = 0; angle < Math.PI * 2; angle += Math.PI / 4) {
            ctx.beginPath();
            ctx.moveTo(carOffset + 22 + Math.cos(angle) * 1.5, 28 + Math.sin(angle) * 1.5);
            ctx.lineTo(carOffset + 22 + Math.cos(angle) * 4.5, 28 + Math.sin(angle) * 4.5);
            ctx.stroke();
          }
          
          // Right car wheel flange
          ctx.strokeStyle = '#696969';
          ctx.lineWidth = 2;
          ctx.beginPath();
          ctx.arc(carOffset + 22, 28, 10, 0, Math.PI * 2);
          ctx.stroke();
          
          // Coupling between cars
          if (i < LETTERS.length - 1) {
            ctx.fillStyle = '#696969';
            ctx.fillRect(carOffset + 28, 12, 6, 8);
          }
          
          carOffset += 35; // Move to next car position
        }
        
        // Reset shadow
        ctx.shadowColor = 'transparent';
        ctx.shadowBlur = 0;
        ctx.shadowOffsetX = 0;
        ctx.shadowOffsetY = 0;
        
        ctx.restore();
      }

      function draw() {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        
        drawBackground();
        drawTrack();
        drawTrain();
        drawSmoke();
      }

      function gameLoop() {
        updateTrain();
        draw();
        requestAnimationFrame(gameLoop);
      }

      // Initialize and start
      fit();
      addEventListener("resize", fit);
      gameLoop();
    })();
  </script>
</BaseLayout>

